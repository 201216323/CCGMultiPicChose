package com.example.ccgmultipicchose;import android.content.Context;import android.os.Environment;import java.io.File;import java.security.MessageDigest;public final class CacheNameUtil {	private CacheNameUtil() {	}	/**	 * 根据图片url获取本地文件的名字	 * 	 * @param context	 *            Context	 * @param url	 *            图片网络地址	 * 	 * @return String	 */	public static String getName(Context context, String url) {		return md5(url);	}	/**	 * 根据图片url获取本地文件的路径，外部存储器的缓存目录优先级高于内部存储器	 * 	 * @param context	 *            Context	 * @param url	 *            图片网络地址	 * 	 * @return String	 */	public static String getCachePath(Context context, String url) {		return getCacheDir(context) + getName(context, url);	}	/**	 * 根据图片url获取本地文件对应的内部存储器的缓存路径	 * 	 * @param context	 *            Context	 * @param url	 *            图片网络地址	 * 	 * @return String	 */	public static String getInternalPath(Context context, String url) {		return getInternalCacheDir(context) + getName(context, url);	}	/**	 * 根据图片url获取本地文件对应的外部存储器的缓存路径	 * 	 * @param context	 *            Context	 * @param url	 *            图片网络地址	 * 	 * @return String	 */	public static String getExternalPath(Context context, String url) {		return getExternalCacheDir(context) + getName(context, url);	}	/**	 * MD5加密	 * 	 * @param source	 *            源串	 * @return 加密后的值 16位	 */	private static String md5(String source) {		char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',				'A', 'B', 'C', 'D', 'E', 'F' };		try {			byte[] btInput = source.getBytes("utf8");			MessageDigest mdInst = MessageDigest.getInstance("MD5");			mdInst.update(btInput);			byte[] md = mdInst.digest();			int j = md.length;			char str[] = new char[j * 2];			int k = 0;			for (int i = 0; i < j; i++) {				byte byte0 = md[i];				str[k++] = hexDigits[byte0 >>> 4 & 0xf];				str[k++] = hexDigits[byte0 & 0xf];			}			return new String(str).substring(8, 24);		} catch (Exception e) {			return null;		}	}	/**	 * 获取程序缓存目录，优先获取外部存储器	 * 	 * @param context	 * @return String	 */	public static String getCacheDir(Context context) {		return (null != getExternalCacheDir(context)) ? getExternalCacheDir(context)				: getInternalCacheDir(context);	}	/**	 * 获取内部缓存目录	 * 	 * @param context	 *            Context	 * @return 内部存储器不可用时，返回null，否则返回String对象;	 */	public static String getInternalCacheDir(Context context) {		return context.getCacheDir().getAbsolutePath() + "/";	}	/**	 * 获取外部缓存目录	 * 	 * @param context	 *            Context	 * @return 外部存储器不可用时，返回null，否则返回String对象;	 */	public static String getExternalCacheDir(Context context) {		if (isExternalStorageAvailable()) {			String sdcard = Environment.getExternalStorageDirectory()					.getAbsolutePath() + "/";			String path = sdcard + "ABC";			File cache = new File(path);			cache.mkdirs();			return path;		}		return null;	}		/**	 * 获取外部缓存目录	 * @return 外部存储器不可用时，返回null，否则返回String对象;	 */	public static String getVideoCacheDir() {		if (isExternalStorageAvailable()) {			String sdcard = Environment.getExternalStorageDirectory()					.getAbsolutePath() + "/";			String path = sdcard + "shenlan/Videos";			File cache = new File(path);			cache.mkdirs();			return path;		}		return null;	}	/**	 * 外部存储器是否可用	 * 	 * @return 可用返回true，否则返回false;	 */	public static boolean isExternalStorageAvailable() {		return isHaveExternalStorage() && !isExternalStorageReadOnly();	}	/**	 * 外部存储器是否存在	 * 	 * @return 存在返回true，否则返回false;	 */	private static boolean isHaveExternalStorage() {		String extStorageState = Environment.getExternalStorageState();		return Environment.MEDIA_MOUNTED.equals(extStorageState);	}	/**	 * 外部存储器是否为只读	 * 	 * @return 只读返回true，否则返回false;	 */	private static boolean isExternalStorageReadOnly() {		String extStorageState = Environment.getExternalStorageState();		return Environment.MEDIA_MOUNTED_READ_ONLY.equals(extStorageState);	}}